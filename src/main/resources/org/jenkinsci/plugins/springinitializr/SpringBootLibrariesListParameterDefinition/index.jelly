<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout"
         xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <j:set var="visibleDisplay" value="inline-block"/>
    <style>
        #search {width: 100%}
        #hiddenValue {display: none}
        .selectedDisplay { min-height: 30px}
        .selectedId { background: lightgreen; display: inline-block; padding: 3px; margin: 3px; cursor: pointer;}
        .lib {background: lightgreen; padding: 3px; margin: 3px; cursor: pointer; display: ${visibleDisplay}}
    </style>
    <f:entry title="Spring boot libraries are going to be used">
        <f:textbox id="hiddenValue" field="parameter"/>
        <div class="selectedDisplay" id="selected"></div>
        <input id="search"/>
        <div>
            <j:forEach var="lib" items="${it.libs}">
                <div id="div-${lib.id}" class="lib" onclick="clickedUnselected(event)">${lib.name}</div>
            </j:forEach>
        </div>
    </f:entry>
    <script>
        var model = {
            selectedIds : [],
            searchText : ""
        };
        var searchById = {
        <j:set var="lastIndex" value="${it.libs.size() - 1}"/>
        <j:forEach var="lib" items="${it.libs}">
            "${lib.id}" : "${lib.group.toLowerCase()} ${lib.name.toLowerCase()} ${lib.description.toLowerCase()}"<j:if test="${idx != lastIndex}">,</j:if>
        </j:forEach>
        };

        var searchBox = document.getElementById("search");
        var selectedDisplay = document.getElementById("selected");
        var hiddenValue = document.getElementById("hiddenValue");
        var lastText = "";

        setInterval(function () {
            var text = searchBox.value;
            if(lastText != text) {
                onChange(text);
                lastText = text;
            }
        }, 100)

        function onChange(text) {
            model.searchText = text.toLowerCase();
            updateView();
        }

        function updateView() {
            for(var lib in searchById) {
                if(searchById.hasOwnProperty(lib)) {
                    document.getElementById("div-" + lib).style.display = isVisible(lib) ? "${visibleDisplay}" : "none"
                }
            }
        }

        function isVisible(lib) {
            return model.selectedIds.indexOf(lib) &lt; 0 &amp;&amp; searchById[lib].indexOf(model.searchText) > -1
        }
        function clickedUnselected(event) {
            var id = event.target.id.substring(4);
            model.selectedIds.push(id);
            updateSelected();
        }
        function updateSelected() {
            updateView();
            var anHtml = "";
            var anJson = "";
            for (var prop in model.selectedIds) {
                if (model.selectedIds.hasOwnProperty(prop)) {
                    var item = model.selectedIds[prop];
                    anHtml += "&lt;div class='selectedId' onclick='clickedSelected(\"" + item + "\")'>" + item + "&lt;/div>";
                    anJson += '"' + item + '",';
                }
            }
            selectedDisplay.innerHTML = anHtml;
            var listValue = anJson.substr(0, anJson.length-1);
            hiddenValue.value = "[{\"name\" : \"spring-boot-libraries\", \"value\": [" + listValue + "]}]";
        }
        function clickedSelected(text) {
            var newSelected = [];
            for (var prop in model.selectedIds) {
                if (model.selectedIds.hasOwnProperty(prop)) {
                    if(model.selectedIds[prop] !== text) {
                        newSelected.push(model.selectedIds[prop])
                    }
                }
            }
            model.selectedIds = newSelected;
            updateSelected();
        }
    </script>
</j:jelly>
